{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/FeiyangBai/FeiyangBai/blob/main/image_classifier_from_scratch.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "id": "6625f464",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6625f464",
        "outputId": "4f2690bb-ceac-4679-c453-173fd344921d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Python 3.10.12\n"
          ]
        }
      ],
      "source": [
        "!python --version"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "id": "0e585605",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "0e585605",
        "outputId": "0932f2ee-a744-410f-ce64-ce7e5bac7c61"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'2.1.0+cu118'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "import torch\n",
        "torch.__version__"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "88661001",
      "metadata": {
        "id": "88661001"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import torch\n",
        "import torchvision\n",
        "\n",
        "from torch import nn\n",
        "from torchvision import transforms"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "id": "638f4857",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "638f4857",
        "outputId": "c00f6682-948c-435e-c8ae-50cb8a21432d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'cpu'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n",
        "device"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Yx1hfSuPW9F9",
        "outputId": "f178e9b7-d40e-4bfa-941f-96191e3230f7"
      },
      "id": "Yx1hfSuPW9F9",
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "id": "68353f95",
      "metadata": {
        "id": "68353f95"
      },
      "outputs": [],
      "source": [
        "# Setup directory paths to train and test images\n",
        "train_dir =r\"/content/drive/MyDrive/data/training\"\n",
        "test_dir = r\"/content/drive/MyDrive/data/test\""
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!unzip going_modular.zip"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rGUFgv6kUnCC",
        "outputId": "c22fc38c-bb54-4d51-bb7a-9cbdffd86767"
      },
      "id": "rGUFgv6kUnCC",
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archive:  going_modular.zip\n",
            "replace going_modular/__pycache__/engine.cpython-39.pyc? [y]es, [n]o, [A]ll, [N]one, [r]ename: "
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "66a0626d",
      "metadata": {
        "id": "66a0626d"
      },
      "source": [
        "# Create Datasets and DataLoaders"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "id": "828e061f",
      "metadata": {
        "id": "828e061f"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "\n",
        "from torchvision import datasets, transforms\n",
        "from torch.utils.data import DataLoader\n",
        "\n",
        "NUM_WORKERS = os.cpu_count()\n",
        "\n",
        "def create_dataloaders(\n",
        "    train_dir: str,\n",
        "    test_dir: str,\n",
        "    transform: transforms.Compose,\n",
        "    batch_size: int,\n",
        "    num_workers: int=NUM_WORKERS\n",
        "):\n",
        "\n",
        "  # Use ImageFolder to create dataset(s)\n",
        "  train_data = datasets.ImageFolder(train_dir, transform=transform)\n",
        "  test_data = datasets.ImageFolder(test_dir, transform=transform)\n",
        "\n",
        "  # Get class names\n",
        "  class_names = train_data.classes\n",
        "\n",
        "  # Turn images into data loaders\n",
        "  train_dataloader = DataLoader(\n",
        "      train_data,\n",
        "      batch_size=batch_size,\n",
        "      shuffle=True,\n",
        "      num_workers=num_workers,\n",
        "      pin_memory=True,\n",
        "  )\n",
        "  test_dataloader = DataLoader(\n",
        "      test_data,\n",
        "      batch_size=batch_size,\n",
        "      shuffle=False,\n",
        "      num_workers=num_workers,\n",
        "      pin_memory=True,\n",
        "  )\n",
        "\n",
        "  return train_dataloader, test_dataloader, class_names"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "id": "19da77f9",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "19da77f9",
        "outputId": "227ded79-c02f-466b-e67f-7a0bfc00d7ce"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Manually created transforms: Compose(\n",
            "    Resize(size=(224, 224), interpolation=bilinear, max_size=None, antialias=warn)\n",
            "    ToTensor()\n",
            ")\n"
          ]
        }
      ],
      "source": [
        "# Create image size\n",
        "IMG_SIZE = 224\n",
        "\n",
        "# Create transform pipeline manually\n",
        "manual_transforms = transforms.Compose([\n",
        "    transforms.Resize((IMG_SIZE, IMG_SIZE)),\n",
        "    transforms.ToTensor(),\n",
        "])\n",
        "print(f\"Manually created transforms: {manual_transforms}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "id": "308f1c2f",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "308f1c2f",
        "outputId": "5a899582-b310-42d1-c788-12f1f01e68d7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(<torch.utils.data.dataloader.DataLoader at 0x7c4ac92cda50>,\n",
              " <torch.utils.data.dataloader.DataLoader at 0x7c4ac919be50>,\n",
              " ['1', '2', '3', '4', '5', '6'])"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "# Set the batch size\n",
        "BATCH_SIZE = 32\n",
        "\n",
        "# Create data loaders\n",
        "train_dataloader, test_dataloader, class_names = create_dataloaders(\n",
        "    train_dir=train_dir,\n",
        "    test_dir=test_dir,\n",
        "    transform=manual_transforms,\n",
        "    batch_size=BATCH_SIZE\n",
        ")\n",
        "\n",
        "train_dataloader, test_dataloader, class_names"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "id": "0cd042d5",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 446
        },
        "id": "0cd042d5",
        "outputId": "69d97b49-b338-40ec-c963-b7823415131c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch.Size([3, 224, 224]) tensor(4)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Let's visualize a image in order to know if data is loaded properly or not\n",
        "\n",
        "# Get a batch of images\n",
        "image_batch, label_batch = next(iter(train_dataloader))\n",
        "\n",
        "# Get a single image from the batch\n",
        "image, label = image_batch[0], label_batch[0]\n",
        "\n",
        "# View the batch shapes\n",
        "print(image.shape, label)\n",
        "\n",
        "# Plot image with matplotlib\n",
        "plt.imshow(image.permute(1, 2, 0)) # rearrange image dimensions to suit matplotlib [color_channels, height, width] -> [height, width, color_channels]\n",
        "plt.title(class_names[label])\n",
        "plt.axis(False);"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "cc53e072",
      "metadata": {
        "id": "cc53e072"
      },
      "source": [
        "# Step 1\n",
        "\n",
        "#### Tasks:\n",
        "\n",
        "1- turn an image into patches\n",
        "\n",
        "2- flatten the patch feature maps into a single dimension\n",
        "\n",
        "3- Convert the output into Desried output (flattened 2D patches): (196, 768) -> N×(P2⋅C)       #Current shape: (1, 768, 196)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "id": "15d44424",
      "metadata": {
        "id": "15d44424"
      },
      "outputs": [],
      "source": [
        "# 1. Create a class which subclasses nn.Module\n",
        "class PatchEmbedding(nn.Module):\n",
        "    \"\"\"Turns a 2D input image into a 1D sequence learnable embedding vector.\n",
        "\n",
        "    Args:\n",
        "        in_channels (int): Number of color channels for the input images. Defaults to 3.\n",
        "        patch_size (int): Size of patches to convert input image into. Defaults to 16.\n",
        "        embedding_dim (int): Size of embedding to turn image into. Defaults to 768.\n",
        "    \"\"\"\n",
        "    # 2. Initialize the class with appropriate variables\n",
        "    def __init__(self,\n",
        "                 in_channels:int=3,\n",
        "                 patch_size:int=16,\n",
        "                 embedding_dim:int=768):\n",
        "        super().__init__()\n",
        "\n",
        "        # 3. Create a layer to turn an image into patches\n",
        "        self.patcher = nn.Conv2d(in_channels=in_channels,\n",
        "                                 out_channels=embedding_dim,\n",
        "                                 kernel_size=patch_size,\n",
        "                                 stride=patch_size,\n",
        "                                 padding=0)\n",
        "\n",
        "        # 4. Create a layer to flatten the patch feature maps into a single dimension\n",
        "        self.flatten = nn.Flatten(start_dim=2, # only flatten the feature map dimensions into a single vector\n",
        "                                  end_dim=3)\n",
        "\n",
        "    # 5. Define the forward method\n",
        "    def forward(self, x):\n",
        "        # Create assertion to check that inputs are the correct shape\n",
        "        image_resolution = x.shape[-1]\n",
        "        assert image_resolution % patch_size == 0, f\"Input image size must be divisble by patch size, image shape: {image_resolution}, patch size: {patch_size}\"\n",
        "\n",
        "        # Perform the forward pass\n",
        "        x_patched = self.patcher(x)\n",
        "        x_flattened = self.flatten(x_patched)\n",
        "\n",
        "        # 6. Make sure the output shape has the right order\n",
        "        return x_flattened.permute(0, 2, 1) # adjust so the embedding is on the final dimension [batch_size, P^2•C, N] -> [batch_size, N, P^2•C]"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "93f238d6",
      "metadata": {
        "id": "93f238d6"
      },
      "source": [
        "# PatchEmbedding layer ready"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "id": "d991f3d7",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d991f3d7",
        "outputId": "db891ca6-a9ea-49cc-9775-2f160bf6f78f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Input image shape: torch.Size([1, 3, 224, 224])\n",
            "Output patch embedding shape: torch.Size([1, 196, 768])\n"
          ]
        }
      ],
      "source": [
        "# Let's test it on single image\n",
        "patch_size =16\n",
        "\n",
        "# Set seeds\n",
        "def set_seeds(seed: int=42):\n",
        "    \"\"\"Sets random sets for torch operations.\n",
        "\n",
        "    Args:\n",
        "        seed (int, optional): Random seed to set. Defaults to 42.\n",
        "    \"\"\"\n",
        "    # Set the seed for general torch operations\n",
        "    torch.manual_seed(seed)\n",
        "    # Set the seed for CUDA torch operations (ones that happen on the GPU)\n",
        "    torch.cuda.manual_seed(seed)\n",
        "\n",
        "\n",
        "\n",
        "set_seeds()\n",
        "\n",
        "# Create an instance of patch embedding layer\n",
        "patchify = PatchEmbedding(in_channels=3,\n",
        "                          patch_size=16,\n",
        "                          embedding_dim=768)\n",
        "\n",
        "# Pass a single image through\n",
        "print(f\"Input image shape: {image.unsqueeze(0).shape}\")\n",
        "patch_embedded_image = patchify(image.unsqueeze(0)) # add an extra batch dimension on the 0th index, otherwise will error\n",
        "print(f\"Output patch embedding shape: {patch_embedded_image.shape}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "id": "ad3bae9c",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ad3bae9c",
        "outputId": "373fd519-2b90-467a-98fd-f4acb4b16073"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[[-0.2088,  0.0390, -0.0771,  ...,  0.1550, -0.0806,  0.0683],\n",
            "         [-0.2186,  0.0444, -0.0873,  ...,  0.1634, -0.0857,  0.0793],\n",
            "         [-0.2289,  0.0509, -0.0906,  ...,  0.1648, -0.0917,  0.0760],\n",
            "         ...,\n",
            "         [-0.1377,  0.0186, -0.0418,  ...,  0.1164, -0.0787,  0.0550],\n",
            "         [-0.1341,  0.0209, -0.0412,  ...,  0.1115, -0.0727,  0.0518],\n",
            "         [-0.1327,  0.0226, -0.0407,  ...,  0.1052, -0.0689,  0.0489]]],\n",
            "       grad_fn=<PermuteBackward0>)\n",
            "Patch embedding shape: torch.Size([1, 196, 768]) -> [batch_size, number_of_patches, embedding_dimension]\n"
          ]
        }
      ],
      "source": [
        "# View the patch embedding and patch embedding shape\n",
        "\n",
        "\n",
        "print(patch_embedded_image)\n",
        "print(f\"Patch embedding shape: {patch_embedded_image.shape} -> [batch_size, number_of_patches, embedding_dimension]\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "id": "111bb99f",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "111bb99f",
        "outputId": "0df875ff-fc0d-40cc-c4ed-ab90a821df5b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Image tensor shape: torch.Size([3, 224, 224])\n",
            "Input image with batch dimension shape: torch.Size([1, 3, 224, 224])\n",
            "Patching embedding shape: torch.Size([1, 196, 768])\n",
            "Class token embedding shape: torch.Size([1, 1, 768])\n",
            "Patch embedding with class token shape: torch.Size([1, 197, 768])\n",
            "Patch and position embedding shape: torch.Size([1, 197, 768])\n",
            "tensor([[[ 1.0000,  1.0000,  1.0000,  ...,  1.0000,  1.0000,  1.0000],\n",
            "         [-0.2088,  0.0390, -0.0771,  ...,  0.1550, -0.0806,  0.0683],\n",
            "         [-0.2186,  0.0444, -0.0873,  ...,  0.1634, -0.0857,  0.0793],\n",
            "         ...,\n",
            "         [-0.1377,  0.0186, -0.0418,  ...,  0.1164, -0.0787,  0.0550],\n",
            "         [-0.1341,  0.0209, -0.0412,  ...,  0.1115, -0.0727,  0.0518],\n",
            "         [-0.1327,  0.0226, -0.0407,  ...,  0.1052, -0.0689,  0.0489]]],\n",
            "       grad_fn=<CatBackward0>)\n"
          ]
        }
      ],
      "source": [
        "# Now add the the learnable class embedding and position embeddings\n",
        "# From start to positional encoding: All in 1 cell\n",
        "\n",
        "set_seeds()\n",
        "\n",
        "# 1. Set patch size\n",
        "patch_size = 16\n",
        "\n",
        "# 2. Print shape of original image tensor and get the image dimensions\n",
        "print(f\"Image tensor shape: {image.shape}\")\n",
        "height, width = image.shape[1], image.shape[2]\n",
        "\n",
        "# 3. Get image tensor and add batch dimension\n",
        "x = image.unsqueeze(0)\n",
        "print(f\"Input image with batch dimension shape: {x.shape}\")\n",
        "\n",
        "# 4. Create patch embedding layer\n",
        "patch_embedding_layer = PatchEmbedding(in_channels=3,\n",
        "                                       patch_size=patch_size,\n",
        "                                       embedding_dim=768)\n",
        "\n",
        "# 5. Pass image through patch embedding layer\n",
        "patch_embedding = patch_embedding_layer(x)\n",
        "print(f\"Patching embedding shape: {patch_embedding.shape}\")\n",
        "\n",
        "\n",
        "\n",
        "# 6. Create class token embedding\n",
        "batch_size = patch_embedding.shape[0]\n",
        "embedding_dimension = patch_embedding.shape[-1]\n",
        "class_token = nn.Parameter(torch.ones(batch_size, 1, embedding_dimension),\n",
        "                           requires_grad=True) # make sure it's learnable\n",
        "print(f\"Class token embedding shape: {class_token.shape}\")\n",
        "\n",
        "# 7. Prepend class token embedding to patch embedding\n",
        "patch_embedding_class_token = torch.cat((class_token, patch_embedding), dim=1)\n",
        "print(f\"Patch embedding with class token shape: {patch_embedding_class_token.shape}\")\n",
        "\n",
        "# 8. Create position embedding\n",
        "number_of_patches = int((height * width) / patch_size**2)\n",
        "position_embedding = nn.Parameter(torch.ones(1, number_of_patches+1, embedding_dimension),\n",
        "                                  requires_grad=True) # make sure it's learnable\n",
        "\n",
        "\n",
        "# 9. Add position embedding to patch embedding with class token\n",
        "patch_and_position_embedding = patch_embedding_class_token + position_embedding\n",
        "print(f\"Patch and position embedding shape: {patch_and_position_embedding.shape}\")\n",
        "#patch_and_position_embedding\n",
        "\n",
        "print(patch_embedding_class_token)  #1 is added in the beginning of each\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "50ecaae3",
      "metadata": {
        "id": "50ecaae3"
      },
      "source": [
        "Here we're only creating the class token embedding as torch.ones() for demonstration purposes, in reality, you'd likely create the class token embedding with torch.randn() (since machine learning is all about harnessing the power of controlled randomness, you generally start with a random number and improve it over time)."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "0aeb4eca",
      "metadata": {
        "id": "0aeb4eca"
      },
      "source": [
        "# Lets create layers used in Transformer's encoder:\n",
        "\n",
        "\n",
        "#### Norm (LN or LayerNorm) - torch.nn.LayerNorm().\n",
        "\n",
        "Layer Normalization (torch.nn.LayerNorm() or Norm or LayerNorm or LN) normalizes an input over the last dimension.\n",
        "\n",
        "Layer Normalization helps improve training time and model generalization (ability to adapt to unseen data).\n",
        "\n",
        "\n",
        "#### We can implement the MSA layer in PyTorch with torch.nn.MultiheadAttention() with the parameters:\n",
        "\n",
        "Multi-Head Self Attention (MSA) - <b>torch.nn.MultiheadAttention()</b>\n",
        "\n",
        "    embed_dim - the embedding dimension D .\n",
        "\n",
        "    num_heads - how many attention heads to use (this is where the term \"multihead\" comes from)\n",
        "\n",
        "    dropout - whether or not to apply dropout to the attention layer\n",
        "\n",
        "    batch_first - does our batch dimension come first? (yes it does)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "id": "d5effd23",
      "metadata": {
        "id": "d5effd23"
      },
      "outputs": [],
      "source": [
        "# 1. Create a class that inherits from nn.Module\n",
        "class MultiheadSelfAttentionBlock(nn.Module):\n",
        "    \"\"\"Creates a multi-head self-attention block (\"MSA block\" for short).\n",
        "    \"\"\"\n",
        "    # 2. Initialize the class with hyperparameters from Table 1\n",
        "    def __init__(self,\n",
        "                 embedding_dim:int=768, # Hidden size D from Table 1 for ViT-Base\n",
        "                 num_heads:int=12, # Heads from Table 1 for ViT-Base\n",
        "                 attn_dropout:float=0): # doesn't look like the paper uses any dropout in MSABlocks\n",
        "        super().__init__()\n",
        "\n",
        "        # 3. Create the Norm layer (LN)\n",
        "        self.layer_norm = nn.LayerNorm(normalized_shape=embedding_dim)\n",
        "\n",
        "        # 4. Create the Multi-Head Attention (MSA) layer\n",
        "        self.multihead_attn = nn.MultiheadAttention(embed_dim=embedding_dim,\n",
        "                                                    num_heads=num_heads,\n",
        "                                                    dropout=attn_dropout,\n",
        "                                                    batch_first=True) # does our batch dimension come first?\n",
        "\n",
        "    # 5. Create a forward() method to pass the data throguh the layers\n",
        "    def forward(self, x):\n",
        "        x = self.layer_norm(x)\n",
        "        attn_output, _ = self.multihead_attn(query=x, # query embeddings\n",
        "                                             key=x, # key embeddings\n",
        "                                             value=x, # value embeddings\n",
        "                                             need_weights=False) # do we need the weights or just the layer outputs?\n",
        "        return attn_output"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "6f95822a",
      "metadata": {
        "id": "6f95822a"
      },
      "source": [
        "# MLP Block"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "id": "b61bd1d2",
      "metadata": {
        "id": "b61bd1d2"
      },
      "outputs": [],
      "source": [
        "# 1. Create a class that inherits from nn.Module\n",
        "class MLPBlock(nn.Module):\n",
        "    \"\"\"Creates a layer normalized multilayer perceptron block (\"MLP block\" for short).\"\"\"\n",
        "    # 2. Initialize the class with hyperparameters from Table 1 and Table 3\n",
        "    def __init__(self,\n",
        "                 embedding_dim:int=768, # Hidden Size D from Table 1 for ViT-Base\n",
        "                 mlp_size:int=3072, # MLP size from Table 1 for ViT-Base\n",
        "                 dropout:float=0.1): # Dropout from Table 3 for ViT-Base\n",
        "        super().__init__()\n",
        "\n",
        "        # 3. Create the Norm layer (LN)\n",
        "        self.layer_norm = nn.LayerNorm(normalized_shape=embedding_dim)\n",
        "\n",
        "        # 4. Create the Multilayer perceptron (MLP) layer(s)\n",
        "        self.mlp = nn.Sequential(\n",
        "            nn.Linear(in_features=embedding_dim,\n",
        "                      out_features=mlp_size),\n",
        "            nn.GELU(), # \"The MLP contains two layers with a GELU non-linearity (section 3.1).\"\n",
        "            nn.Dropout(p=dropout),\n",
        "            nn.Linear(in_features=mlp_size, # needs to take same in_features as out_features of layer above\n",
        "                      out_features=embedding_dim), # take back to embedding_dim\n",
        "            nn.Dropout(p=dropout) # \"Dropout, when used, is applied after every dense layer..\"\n",
        "        )\n",
        "\n",
        "    # 5. Create a forward() method to pass the data throguh the layers\n",
        "    def forward(self, x):\n",
        "        x = self.layer_norm(x)\n",
        "        x = self.mlp(x)\n",
        "        return x"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e4066b0e",
      "metadata": {
        "id": "e4066b0e"
      },
      "source": [
        "# Creating a Transformer Encoder by combining our custom made layers\n",
        "\n",
        "In below cell we are creating transformer encoder ourself"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "id": "f2c1ded8",
      "metadata": {
        "id": "f2c1ded8"
      },
      "outputs": [],
      "source": [
        "# 1. Create a class that inherits from nn.Module\n",
        "class TransformerEncoderBlock(nn.Module):\n",
        "    \"\"\"Creates a Transformer Encoder block.\"\"\"\n",
        "    # 2. Initialize the class with hyperparameters from Table 1 and Table 3\n",
        "    def __init__(self,\n",
        "                 embedding_dim:int=768, # Hidden size D from Table 1 for ViT-Base\n",
        "                 num_heads:int=12, # Heads from Table 1 for ViT-Base\n",
        "                 mlp_size:int=3072, # MLP size from Table 1 for ViT-Base\n",
        "                 mlp_dropout:float=0.1, # Amount of dropout for dense layers from Table 3 for ViT-Base\n",
        "                 attn_dropout:float=0): # Amount of dropout for attention layers\n",
        "        super().__init__()\n",
        "\n",
        "        # 3. Create MSA block (equation 2)\n",
        "        self.msa_block = MultiheadSelfAttentionBlock(embedding_dim=embedding_dim,\n",
        "                                                     num_heads=num_heads,\n",
        "                                                     attn_dropout=attn_dropout)\n",
        "\n",
        "        # 4. Create MLP block (equation 3)\n",
        "        self.mlp_block =  MLPBlock(embedding_dim=embedding_dim,\n",
        "                                   mlp_size=mlp_size,\n",
        "                                   dropout=mlp_dropout)\n",
        "\n",
        "    # 5. Create a forward() method\n",
        "    def forward(self, x):\n",
        "\n",
        "        # 6. Create residual connection for MSA block (add the input to the output)\n",
        "        x =  self.msa_block(x) + x\n",
        "\n",
        "        # 7. Create residual connection for MLP block (add the input to the output)\n",
        "        x = self.mlp_block(x) + x\n",
        "\n",
        "        return x\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b408ef42",
      "metadata": {
        "id": "b408ef42"
      },
      "source": [
        "#### Transformer Encoder block created!"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import torchvision"
      ],
      "metadata": {
        "id": "SJf5KYa_fUCK"
      },
      "id": "SJf5KYa_fUCK",
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "id": "114d4c67",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "114d4c67",
        "outputId": "0274a42b-60f9-4df3-9d88-1046ef71a27e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "==================================================================================================================================\n",
              "Layer (type (var_name))                            Input Shape          Output Shape         Param #              Trainable\n",
              "==================================================================================================================================\n",
              "TransformerEncoderBlock (TransformerEncoderBlock)  [1, 197, 768]        [1, 197, 768]        --                   True\n",
              "├─MultiheadSelfAttentionBlock (msa_block)          [1, 197, 768]        [1, 197, 768]        --                   True\n",
              "│    └─LayerNorm (layer_norm)                      [1, 197, 768]        [1, 197, 768]        1,536                True\n",
              "│    └─MultiheadAttention (multihead_attn)         --                   [1, 197, 768]        2,362,368            True\n",
              "├─MLPBlock (mlp_block)                             [1, 197, 768]        [1, 197, 768]        --                   True\n",
              "│    └─LayerNorm (layer_norm)                      [1, 197, 768]        [1, 197, 768]        1,536                True\n",
              "│    └─Sequential (mlp)                            [1, 197, 768]        [1, 197, 768]        --                   True\n",
              "│    │    └─Linear (0)                             [1, 197, 768]        [1, 197, 3072]       2,362,368            True\n",
              "│    │    └─GELU (1)                               [1, 197, 3072]       [1, 197, 3072]       --                   --\n",
              "│    │    └─Dropout (2)                            [1, 197, 3072]       [1, 197, 3072]       --                   --\n",
              "│    │    └─Linear (3)                             [1, 197, 3072]       [1, 197, 768]        2,360,064            True\n",
              "│    │    └─Dropout (4)                            [1, 197, 768]        [1, 197, 768]        --                   --\n",
              "==================================================================================================================================\n",
              "Total params: 7,087,872\n",
              "Trainable params: 7,087,872\n",
              "Non-trainable params: 0\n",
              "Total mult-adds (M): 4.73\n",
              "==================================================================================================================================\n",
              "Input size (MB): 0.61\n",
              "Forward/backward pass size (MB): 8.47\n",
              "Params size (MB): 18.90\n",
              "Estimated Total Size (MB): 27.98\n",
              "=================================================================================================================================="
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ],
      "source": [
        "transformer_encoder_block = TransformerEncoderBlock()\n",
        "\n",
        "from torchinfo import summary\n",
        "# # Print an input and output summary of our Transformer Encoder (uncomment for full output)\n",
        "summary(model=transformer_encoder_block,\n",
        "        input_size=(1, 197, 768), # (batch_size, num_patches, embedding_dimension)\n",
        "        col_names=[\"input_size\", \"output_size\", \"num_params\", \"trainable\"],\n",
        "        col_width=20,\n",
        "       row_settings=[\"var_names\"])"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "0d076ace",
      "metadata": {
        "id": "0d076ace"
      },
      "source": [
        "# Let's build a vision transformer"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "id": "93b02def",
      "metadata": {
        "id": "93b02def"
      },
      "outputs": [],
      "source": [
        "# 1. Create a ViT class that inherits from nn.Module\n",
        "class ViT(nn.Module):\n",
        "    \"\"\"Creates a Vision Transformer architecture with ViT-Base hyperparameters by default.\"\"\"\n",
        "    # 2. Initialize the class with hyperparameters from Table 1 and Table 3\n",
        "    def __init__(self,\n",
        "                 img_size:int=224, # Training resolution from Table 3 in ViT paper\n",
        "                 in_channels:int=3, # Number of channels in input image\n",
        "                 patch_size:int=16, # Patch size\n",
        "                 num_transformer_layers:int=12, # Layers from Table 1 for ViT-Base\n",
        "                 embedding_dim:int=768, # Hidden size D from Table 1 for ViT-Base\n",
        "                 mlp_size:int=3072, # MLP size from Table 1 for ViT-Base\n",
        "                 num_heads:int=12, # Heads from Table 1 for ViT-Base\n",
        "                 attn_dropout:float=0, # Dropout for attention projection\n",
        "                 mlp_dropout:float=0.1, # Dropout for dense/MLP layers\n",
        "                 embedding_dropout:float=0.1, # Dropout for patch and position embeddings\n",
        "                 num_classes:int=1000): # Default for ImageNet but can customize this\n",
        "        super().__init__() # don't forget the super().__init__()!\n",
        "\n",
        "        # 3. Make the image size is divisble by the patch size\n",
        "        assert img_size % patch_size == 0, f\"Image size must be divisible by patch size, image size: {img_size}, patch size: {patch_size}.\"\n",
        "\n",
        "        # 4. Calculate number of patches (height * width/patch^2)\n",
        "        self.num_patches = (img_size * img_size) // patch_size**2\n",
        "\n",
        "        # 5. Create learnable class embedding (needs to go at front of sequence of patch embeddings)\n",
        "        self.class_embedding = nn.Parameter(data=torch.randn(1, 1, embedding_dim),\n",
        "                                            requires_grad=True)\n",
        "\n",
        "        # 6. Create learnable position embedding\n",
        "        self.position_embedding = nn.Parameter(data=torch.randn(1, self.num_patches+1, embedding_dim),\n",
        "                                               requires_grad=True)\n",
        "\n",
        "        # 7. Create embedding dropout value\n",
        "        self.embedding_dropout = nn.Dropout(p=embedding_dropout)\n",
        "\n",
        "        # 8. Create patch embedding layer\n",
        "        self.patch_embedding = PatchEmbedding(in_channels=in_channels,\n",
        "                                              patch_size=patch_size,\n",
        "                                              embedding_dim=embedding_dim)\n",
        "\n",
        "        # 9. Create Transformer Encoder blocks (we can stack Transformer Encoder blocks using nn.Sequential())\n",
        "        # Note: The \"*\" means \"all\"\n",
        "        self.transformer_encoder = nn.Sequential(*[TransformerEncoderBlock(embedding_dim=embedding_dim,\n",
        "                                                                            num_heads=num_heads,\n",
        "                                                                            mlp_size=mlp_size,\n",
        "                                                                            mlp_dropout=mlp_dropout) for _ in range(num_transformer_layers)])\n",
        "\n",
        "        # 10. Create classifier head\n",
        "        self.classifier = nn.Sequential(\n",
        "            nn.LayerNorm(normalized_shape=embedding_dim),\n",
        "            nn.Linear(in_features=embedding_dim,\n",
        "                      out_features=num_classes)\n",
        "        )\n",
        "\n",
        "    # 11. Create a forward() method\n",
        "    def forward(self, x):\n",
        "\n",
        "        # 12. Get batch size\n",
        "        batch_size = x.shape[0]\n",
        "\n",
        "        # 13. Create class token embedding and expand it to match the batch size (equation 1)\n",
        "        class_token = self.class_embedding.expand(batch_size, -1, -1) # \"-1\" means to infer the dimension (try this line on its own)\n",
        "\n",
        "        # 14. Create patch embedding (equation 1)\n",
        "        x = self.patch_embedding(x)\n",
        "\n",
        "        # 15. Concat class embedding and patch embedding (equation 1)\n",
        "        x = torch.cat((class_token, x), dim=1)\n",
        "\n",
        "        # 16. Add position embedding to patch embedding (equation 1)\n",
        "        x = self.position_embedding + x\n",
        "\n",
        "        # 17. Run embedding dropout (Appendix B.1)\n",
        "        x = self.embedding_dropout(x)\n",
        "\n",
        "        # 18. Pass patch, position and class embedding through transformer encoder layers (equations 2 & 3)\n",
        "        x = self.transformer_encoder(x)\n",
        "\n",
        "        # 19. Put 0 index logit through classifier (equation 4)\n",
        "        x = self.classifier(x[:, 0]) # run on each sample in a batch at 0 index\n",
        "\n",
        "        return x"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "32280991",
      "metadata": {
        "id": "32280991"
      },
      "source": [
        "# Train Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "id": "5a9288fe",
      "metadata": {
        "id": "5a9288fe"
      },
      "outputs": [],
      "source": [
        "# Train our MOdel\n",
        "\n",
        "# Create an instance of ViT with the number of classes we're working with (pizza, steak, sushi)\n",
        "vit = ViT(num_classes=len(class_names))\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import engine\n",
        "\n",
        "# Setup the optimizer to optimize our ViT model parameters using hyperparameters from the ViT paper\n",
        "optimizer = torch.optim.Adam(params=vit.parameters(),\n",
        "                             lr=3e-3, # Base LR from Table 3 for ViT-* ImageNet-1k\n",
        "                             betas=(0.9, 0.999), # default values but also mentioned in ViT paper section 4.1 (Training & Fine-tuning)\n",
        "                             weight_decay=0.3) # from the ViT paper section 4.1 (Training & Fine-tuning) and Table 3 for ViT-* ImageNet-1k\n",
        "\n",
        "# Setup the loss function for multi-class classification\n",
        "loss_fn = torch.nn.CrossEntropyLoss()\n",
        "\n",
        "# Set the seeds\n",
        "set_seeds()\n",
        "\n",
        "# Train the model and save the training results to a dictionary\n",
        "results = engine.train(model=vit,\n",
        "                       train_dataloader=train_dataloader,\n",
        "                       test_dataloader=test_dataloader,\n",
        "                       optimizer=optimizer,\n",
        "                       loss_fn=loss_fn,\n",
        "                       epochs=10,\n",
        "                       device=device)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 49,
          "referenced_widgets": [
            "cb08ad47b95f459bab9ef3446dcf0108",
            "bed93a14869746be82df0cd3d0b36236",
            "c43865e31499414f9cf403c4806c6ba6",
            "1b58662912444385ad46e4ddb893dc0d",
            "d8c51e2e5efa4a2ba2f8073c37617992",
            "7dbbf201f4ac45b68eabb30695bb6a81",
            "2437baafc97d446c9cb6963396c4c6af",
            "f09a777134144599ac2fb28625d451ea",
            "1cf32e49d36f442cbbe39134f01fa5d6",
            "150e6a1740c640a8930cfe86114a1a28",
            "8432609cfd12433985fe9781b9e08f04"
          ]
        },
        "id": "sVxPAWbCWZwz",
        "outputId": "30611b9a-22cd-4230-f0ac-a8c25bf64d27"
      },
      "id": "sVxPAWbCWZwz",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/10 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "cb08ad47b95f459bab9ef3446dcf0108"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "id": "1b421e02",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 253
        },
        "id": "1b421e02",
        "outputId": "e956c1c5-04d8-4c9d-c263-c22e05073ea0"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-8cb314981ebb>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# Setup the optimizer to optimize our ViT model parameters using hyperparameters from the ViT paper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m optimizer = torch.optim.Adam(params=vit.parameters(),\n\u001b[0m\u001b[1;32m      5\u001b[0m                              \u001b[0mlr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m3e-3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;31m# Base LR from Table 3 for ViT-* ImageNet-1k\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m                              \u001b[0mbetas\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0.9\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.999\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;31m# default values but also mentioned in ViT paper section 4.1 (Training & Fine-tuning)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'torch' is not defined"
          ]
        }
      ],
      "source": [
        "from going_modular import engine\n",
        "\n",
        "# Setup the optimizer to optimize our ViT model parameters using hyperparameters from the ViT paper\n",
        "optimizer = torch.optim.Adam(params=vit.parameters(),\n",
        "                             lr=3e-3, # Base LR from Table 3 for ViT-* ImageNet-1k\n",
        "                             betas=(0.9, 0.999), # default values but also mentioned in ViT paper section 4.1 (Training & Fine-tuning)\n",
        "                             weight_decay=0.3) # from the ViT paper section 4.1 (Training & Fine-tuning) and Table 3 for ViT-* ImageNet-1k\n",
        "\n",
        "# Setup the loss function for multi-class classification\n",
        "loss_fn = torch.nn.CrossEntropyLoss()\n",
        "\n",
        "# Set the seeds\n",
        "set_seeds()\n",
        "\n",
        "# Train the model and save the training results to a dictionary\n",
        "results = engine.train(model=vit,\n",
        "                       train_dataloader=train_dataloader,\n",
        "                       test_dataloader=test_dataloader,\n",
        "                       optimizer=optimizer,\n",
        "                       loss_fn=loss_fn,\n",
        "                       epochs=10,\n",
        "                       device=device)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b9e1a0a8",
      "metadata": {
        "id": "b9e1a0a8"
      },
      "source": [
        "Our ViT model has come to life!\n",
        "\n",
        "Results on our custom dataset don't look too good.\n",
        "\n",
        "Lets plot the accuracy and loss curves"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "bd44080e",
      "metadata": {
        "id": "bd44080e"
      },
      "outputs": [],
      "source": [
        "# To check out our ViT model's loss curves, we can use the plot_loss_curves function from helper_functions.py\n",
        "from helper_functions import plot_loss_curves\n",
        "\n",
        "# Plot our ViT model's loss curves\n",
        "plot_loss_curves(results)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9f575c15",
      "metadata": {
        "id": "9f575c15"
      },
      "source": [
        "# Predictions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a180aa54",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 399
        },
        "id": "a180aa54",
        "outputId": "45032530-8b6d-4bec-cd78-9081bf4bb89b"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-45-9f43f63b6660>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# Import function to make predictions on images and plot them\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mgoing_modular\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgoing_modular\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredictions\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpred_and_plot_image\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# Setup custom image path\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'going_modular'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ],
      "source": [
        "import requests\n",
        "\n",
        "# Import function to make predictions on images and plot them\n",
        "from going_modular.predictions import pred_and_plot_image\n",
        "\n",
        "# Setup custom image path\n",
        "custom_image_path = \"test_img.jpg\"\n",
        "\n",
        "# Predict on custom image\n",
        "pred_and_plot_image(model=vit,\n",
        "                    image_path=custom_image_path,\n",
        "                    class_names=class_names)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1f5a1a53",
      "metadata": {
        "id": "1f5a1a53"
      },
      "source": [
        "# Next part - Create Image classifier using pretrained model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "bb9ce187",
      "metadata": {
        "id": "bb9ce187"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.10"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "cb08ad47b95f459bab9ef3446dcf0108": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_bed93a14869746be82df0cd3d0b36236",
              "IPY_MODEL_c43865e31499414f9cf403c4806c6ba6",
              "IPY_MODEL_1b58662912444385ad46e4ddb893dc0d"
            ],
            "layout": "IPY_MODEL_d8c51e2e5efa4a2ba2f8073c37617992"
          }
        },
        "bed93a14869746be82df0cd3d0b36236": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_7dbbf201f4ac45b68eabb30695bb6a81",
            "placeholder": "​",
            "style": "IPY_MODEL_2437baafc97d446c9cb6963396c4c6af",
            "value": "  0%"
          }
        },
        "c43865e31499414f9cf403c4806c6ba6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f09a777134144599ac2fb28625d451ea",
            "max": 10,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_1cf32e49d36f442cbbe39134f01fa5d6",
            "value": 0
          }
        },
        "1b58662912444385ad46e4ddb893dc0d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_150e6a1740c640a8930cfe86114a1a28",
            "placeholder": "​",
            "style": "IPY_MODEL_8432609cfd12433985fe9781b9e08f04",
            "value": " 0/10 [00:00&lt;?, ?it/s]"
          }
        },
        "d8c51e2e5efa4a2ba2f8073c37617992": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7dbbf201f4ac45b68eabb30695bb6a81": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2437baafc97d446c9cb6963396c4c6af": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f09a777134144599ac2fb28625d451ea": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1cf32e49d36f442cbbe39134f01fa5d6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "150e6a1740c640a8930cfe86114a1a28": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8432609cfd12433985fe9781b9e08f04": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
